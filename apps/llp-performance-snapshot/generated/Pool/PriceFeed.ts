// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PricePosted extends ethereum.Event {
  get params(): PricePosted__Params {
    return new PricePosted__Params(this);
  }
}

export class PricePosted__Params {
  _event: PricePosted;

  constructor(event: PricePosted) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReporterAdded extends ethereum.Event {
  get params(): ReporterAdded__Params {
    return new ReporterAdded__Params(this);
  }
}

export class ReporterAdded__Params {
  _event: ReporterAdded;

  constructor(event: ReporterAdded) {
    this._event = event;
  }

  get param0(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ReporterRemoved extends ethereum.Event {
  get params(): ReporterRemoved__Params {
    return new ReporterRemoved__Params(this);
  }
}

export class ReporterRemoved__Params {
  _event: ReporterRemoved;

  constructor(event: ReporterRemoved) {
    this._event = event;
  }

  get param0(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TokenAdded extends ethereum.Event {
  get params(): TokenAdded__Params {
    return new TokenAdded__Params(this);
  }
}

export class TokenAdded__Params {
  _event: TokenAdded;

  constructor(event: TokenAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PriceFeed__tokenConfigResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;

  constructor(value0: BigInt, value1: BigInt, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getBaseUnits(): BigInt {
    return this.value0;
  }

  getPriceUnits(): BigInt {
    return this.value1;
  }

  getChainlinkPriceFeed(): Address {
    return this.value2;
  }
}

export class PriceFeed extends ethereum.SmartContract {
  static bind(address: Address): PriceFeed {
    return new PriceFeed("PriceFeed", address);
  }

  MARGIN_PRECISION(): BigInt {
    let result = super.call(
      "MARGIN_PRECISION",
      "MARGIN_PRECISION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MARGIN_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MARGIN_PRECISION",
      "MARGIN_PRECISION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRICE_FEED_TIMEOUT(): BigInt {
    let result = super.call(
      "PRICE_FEED_TIMEOUT",
      "PRICE_FEED_TIMEOUT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PRICE_FEED_TIMEOUT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PRICE_FEED_TIMEOUT",
      "PRICE_FEED_TIMEOUT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRICE_LOWER_BOUND(): BigInt {
    let result = super.call(
      "PRICE_LOWER_BOUND",
      "PRICE_LOWER_BOUND():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PRICE_LOWER_BOUND(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PRICE_LOWER_BOUND",
      "PRICE_LOWER_BOUND():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRICE_UPPER_BOUND(): BigInt {
    let result = super.call(
      "PRICE_UPPER_BOUND",
      "PRICE_UPPER_BOUND():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PRICE_UPPER_BOUND(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PRICE_UPPER_BOUND",
      "PRICE_UPPER_BOUND():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastPrice(token: Address): BigInt {
    let result = super.call("getLastPrice", "getLastPrice(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_getLastPrice(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastPrice",
      "getLastPrice(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrice(token: Address): BigInt {
    let result = super.call("getPrice", "getPrice(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPrice", "getPrice(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isReporter(param0: Address): boolean {
    let result = super.call("isReporter", "isReporter(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isReporter(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isReporter", "isReporter(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reporters(param0: BigInt): Address {
    let result = super.call("reporters", "reporters(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_reporters(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("reporters", "reporters(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenConfig(param0: Address): PriceFeed__tokenConfigResult {
    let result = super.call(
      "tokenConfig",
      "tokenConfig(address):(uint256,uint256,address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new PriceFeed__tokenConfigResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress()
    );
  }

  try_tokenConfig(
    param0: Address
  ): ethereum.CallResult<PriceFeed__tokenConfigResult> {
    let result = super.tryCall(
      "tokenConfig",
      "tokenConfig(address):(uint256,uint256,address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PriceFeed__tokenConfigResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress()
      )
    );
  }

  whitelistedTokens(param0: BigInt): Address {
    let result = super.call(
      "whitelistedTokens",
      "whitelistedTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_whitelistedTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "whitelistedTokens",
      "whitelistedTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddReporterCall extends ethereum.Call {
  get inputs(): AddReporterCall__Inputs {
    return new AddReporterCall__Inputs(this);
  }

  get outputs(): AddReporterCall__Outputs {
    return new AddReporterCall__Outputs(this);
  }
}

export class AddReporterCall__Inputs {
  _call: AddReporterCall;

  constructor(call: AddReporterCall) {
    this._call = call;
  }

  get reporter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddReporterCall__Outputs {
  _call: AddReporterCall;

  constructor(call: AddReporterCall) {
    this._call = call;
  }
}

export class ConfigTokenCall extends ethereum.Call {
  get inputs(): ConfigTokenCall__Inputs {
    return new ConfigTokenCall__Inputs(this);
  }

  get outputs(): ConfigTokenCall__Outputs {
    return new ConfigTokenCall__Outputs(this);
  }
}

export class ConfigTokenCall__Inputs {
  _call: ConfigTokenCall;

  constructor(call: ConfigTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenDecimals(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get priceFeed(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get priceDecimals(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConfigTokenCall__Outputs {
  _call: ConfigTokenCall;

  constructor(call: ConfigTokenCall) {
    this._call = call;
  }
}

export class PostPriceCall extends ethereum.Call {
  get inputs(): PostPriceCall__Inputs {
    return new PostPriceCall__Inputs(this);
  }

  get outputs(): PostPriceCall__Outputs {
    return new PostPriceCall__Outputs(this);
  }
}

export class PostPriceCall__Inputs {
  _call: PostPriceCall;

  constructor(call: PostPriceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PostPriceCall__Outputs {
  _call: PostPriceCall;

  constructor(call: PostPriceCall) {
    this._call = call;
  }
}

export class RemoveReporterCall extends ethereum.Call {
  get inputs(): RemoveReporterCall__Inputs {
    return new RemoveReporterCall__Inputs(this);
  }

  get outputs(): RemoveReporterCall__Outputs {
    return new RemoveReporterCall__Outputs(this);
  }
}

export class RemoveReporterCall__Inputs {
  _call: RemoveReporterCall;

  constructor(call: RemoveReporterCall) {
    this._call = call;
  }

  get reporter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveReporterCall__Outputs {
  _call: RemoveReporterCall;

  constructor(call: RemoveReporterCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
