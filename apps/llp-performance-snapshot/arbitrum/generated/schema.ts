// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Config extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Config entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Config must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Config", id.toString(), this);
    }
  }

  static load(id: string): Config | null {
    return changetype<Config | null>(store.get("Config", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get daoFeeRatio(): BigInt {
    let value = this.get("daoFeeRatio");
    return value!.toBigInt();
  }

  set daoFeeRatio(value: BigInt) {
    this.set("daoFeeRatio", Value.fromBigInt(value));
  }
}

export class RiskFactor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RiskFactor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RiskFactor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RiskFactor", id.toString(), this);
    }
  }

  static load(id: string): RiskFactor | null {
    return changetype<RiskFactor | null>(store.get("RiskFactor", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get totalRiskFactor(): BigInt {
    let value = this.get("totalRiskFactor");
    return value!.toBigInt();
  }

  set totalRiskFactor(value: BigInt) {
    this.set("totalRiskFactor", Value.fromBigInt(value));
  }

  get riskFactors(): Array<BigInt> {
    let value = this.get("riskFactors");
    return value!.toBigIntArray();
  }

  set riskFactors(value: Array<BigInt>) {
    this.set("riskFactors", Value.fromBigIntArray(value));
  }
}

export class Tranche extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tranche entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Tranche must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Tranche", id.toString(), this);
    }
  }

  static load(id: string): Tranche | null {
    return changetype<Tranche | null>(store.get("Tranche", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lastHistoryIndex(): i32 {
    let value = this.get("lastHistoryIndex");
    return value!.toI32();
  }

  set lastHistoryIndex(value: i32) {
    this.set("lastHistoryIndex", Value.fromI32(value));
  }

  get lastPnlIndex(): i32 {
    let value = this.get("lastPnlIndex");
    return value!.toI32();
  }

  set lastPnlIndex(value: i32) {
    this.set("lastPnlIndex", Value.fromI32(value));
  }

  get lastFeeIndex(): i32 {
    let value = this.get("lastFeeIndex");
    return value!.toI32();
  }

  set lastFeeIndex(value: i32) {
    this.set("lastFeeIndex", Value.fromI32(value));
  }

  get llpSupply(): BigInt {
    let value = this.get("llpSupply");
    return value!.toBigInt();
  }

  set llpSupply(value: BigInt) {
    this.set("llpSupply", Value.fromBigInt(value));
  }

  get pnlPerShare(): BigInt {
    let value = this.get("pnlPerShare");
    return value!.toBigInt();
  }

  set pnlPerShare(value: BigInt) {
    this.set("pnlPerShare", Value.fromBigInt(value));
  }

  get feePerShare(): BigInt {
    let value = this.get("feePerShare");
    return value!.toBigInt();
  }

  set feePerShare(value: BigInt) {
    this.set("feePerShare", Value.fromBigInt(value));
  }
}

export class WalletTrancheHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WalletTrancheHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WalletTrancheHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WalletTrancheHistory", id.toString(), this);
    }
  }

  static load(id: string): WalletTrancheHistory | null {
    return changetype<WalletTrancheHistory | null>(
      store.get("WalletTrancheHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value!.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value!.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get tranche(): Bytes {
    let value = this.get("tranche");
    return value!.toBytes();
  }

  set tranche(value: Bytes) {
    this.set("tranche", Value.fromBytes(value));
  }

  get trancheValue(): BigInt {
    let value = this.get("trancheValue");
    return value!.toBigInt();
  }

  set trancheValue(value: BigInt) {
    this.set("trancheValue", Value.fromBigInt(value));
  }

  get llpPrice(): BigInt {
    let value = this.get("llpPrice");
    return value!.toBigInt();
  }

  set llpPrice(value: BigInt) {
    this.set("llpPrice", Value.fromBigInt(value));
  }

  get llpAmount(): BigInt {
    let value = this.get("llpAmount");
    return value!.toBigInt();
  }

  set llpAmount(value: BigInt) {
    this.set("llpAmount", Value.fromBigInt(value));
  }

  get llpAmountChange(): BigInt {
    let value = this.get("llpAmountChange");
    return value!.toBigInt();
  }

  set llpAmountChange(value: BigInt) {
    this.set("llpAmountChange", Value.fromBigInt(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    return value!.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }

  get snapshotAtBlock(): i32 {
    let value = this.get("snapshotAtBlock");
    return value!.toI32();
  }

  set snapshotAtBlock(value: i32) {
    this.set("snapshotAtBlock", Value.fromI32(value));
  }

  get snapshotAtTimestamp(): i32 {
    let value = this.get("snapshotAtTimestamp");
    return value!.toI32();
  }

  set snapshotAtTimestamp(value: i32) {
    this.set("snapshotAtTimestamp", Value.fromI32(value));
  }
}

export class WalletTranche extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WalletTranche entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WalletTranche must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WalletTranche", id.toString(), this);
    }
  }

  static load(id: string): WalletTranche | null {
    return changetype<WalletTranche | null>(store.get("WalletTranche", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value!.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get tranche(): Bytes {
    let value = this.get("tranche");
    return value!.toBytes();
  }

  set tranche(value: Bytes) {
    this.set("tranche", Value.fromBytes(value));
  }

  get llpAmount(): BigInt {
    let value = this.get("llpAmount");
    return value!.toBigInt();
  }

  set llpAmount(value: BigInt) {
    this.set("llpAmount", Value.fromBigInt(value));
  }
}

export class Price extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Price entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Price must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Price", id.toString(), this);
    }
  }

  static load(id: string): Price | null {
    return changetype<Price | null>(store.get("Price", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get period(): string {
    let value = this.get("period");
    return value!.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class FeePerShare extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeePerShare entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeePerShare must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeePerShare", id.toString(), this);
    }
  }

  static load(id: string): FeePerShare | null {
    return changetype<FeePerShare | null>(store.get("FeePerShare", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value!.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get tranche(): Bytes {
    let value = this.get("tranche");
    return value!.toBytes();
  }

  set tranche(value: Bytes) {
    this.set("tranche", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get llpSupply(): BigInt {
    let value = this.get("llpSupply");
    return value!.toBigInt();
  }

  set llpSupply(value: BigInt) {
    this.set("llpSupply", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    return value!.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }
}

export class PnlPerShare extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PnlPerShare entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PnlPerShare must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PnlPerShare", id.toString(), this);
    }
  }

  static load(id: string): PnlPerShare | null {
    return changetype<PnlPerShare | null>(store.get("PnlPerShare", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value!.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get tranche(): Bytes {
    let value = this.get("tranche");
    return value!.toBytes();
  }

  set tranche(value: Bytes) {
    this.set("tranche", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get llpSupply(): BigInt {
    let value = this.get("llpSupply");
    return value!.toBigInt();
  }

  set llpSupply(value: BigInt) {
    this.set("llpSupply", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    return value!.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }
}

export class LlpPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LlpPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LlpPrice must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LlpPrice", id.toString(), this);
    }
  }

  static load(id: string): LlpPrice | null {
    return changetype<LlpPrice | null>(store.get("LlpPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tranche(): Bytes {
    let value = this.get("tranche");
    return value!.toBytes();
  }

  set tranche(value: Bytes) {
    this.set("tranche", Value.fromBytes(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get snapshotAtBlock(): i32 {
    let value = this.get("snapshotAtBlock");
    return value!.toI32();
  }

  set snapshotAtBlock(value: i32) {
    this.set("snapshotAtBlock", Value.fromI32(value));
  }

  get snapshotAtTimestamp(): i32 {
    let value = this.get("snapshotAtTimestamp");
    return value!.toI32();
  }

  set snapshotAtTimestamp(value: i32) {
    this.set("snapshotAtTimestamp", Value.fromI32(value));
  }
}
