// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogPoolAddition extends ethereum.Event {
  get params(): LogPoolAddition__Params {
    return new LogPoolAddition__Params(this);
  }
}

export class LogPoolAddition__Params {
  _event: LogPoolAddition;

  constructor(event: LogPoolAddition) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get allocPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lpToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get rewarder(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class LogRewardPerSecond extends ethereum.Event {
  get params(): LogRewardPerSecond__Params {
    return new LogRewardPerSecond__Params(this);
  }
}

export class LogRewardPerSecond__Params {
  _event: LogRewardPerSecond;

  constructor(event: LogRewardPerSecond) {
    this._event = event;
  }

  get rewardPerSecond(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogSetPool extends ethereum.Event {
  get params(): LogSetPool__Params {
    return new LogSetPool__Params(this);
  }
}

export class LogSetPool__Params {
  _event: LogSetPool;

  constructor(event: LogSetPool) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get allocPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewarder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get overwrite(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class LogUpdatePool extends ethereum.Event {
  get params(): LogUpdatePool__Params {
    return new LogUpdatePool__Params(this);
  }
}

export class LogUpdatePool__Params {
  _event: LogUpdatePool;

  constructor(event: LogUpdatePool) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lastRewardTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lpSupply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get accRewardPerShare(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class LevelMaster__poolInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getAccRewardPerShare(): BigInt {
    return this.value0;
  }

  getLastRewardTime(): BigInt {
    return this.value1;
  }

  getAllocPoint(): BigInt {
    return this.value2;
  }

  getStaking(): boolean {
    return this.value3;
  }
}

export class LevelMaster__updatePoolResultPoolStruct extends ethereum.Tuple {
  get accRewardPerShare(): BigInt {
    return this[0].toBigInt();
  }

  get lastRewardTime(): BigInt {
    return this[1].toBigInt();
  }

  get allocPoint(): BigInt {
    return this[2].toBigInt();
  }

  get staking(): boolean {
    return this[3].toBoolean();
  }
}

export class LevelMaster__userInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getRewardDebt(): BigInt {
    return this.value1;
  }
}

export class LevelMaster extends ethereum.SmartContract {
  static bind(address: Address): LevelMaster {
    return new LevelMaster("LevelMaster", address);
  }

  addedTokens(param0: Address): boolean {
    let result = super.call("addedTokens", "addedTokens(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_addedTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("addedTokens", "addedTokens(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  levelPool(): Address {
    let result = super.call("levelPool", "levelPool():(address)", []);

    return result[0].toAddress();
  }

  try_levelPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("levelPool", "levelPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  levelStake(): Address {
    let result = super.call("levelStake", "levelStake():(address)", []);

    return result[0].toAddress();
  }

  try_levelStake(): ethereum.CallResult<Address> {
    let result = super.tryCall("levelStake", "levelStake():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lpToken(param0: BigInt): Address {
    let result = super.call("lpToken", "lpToken(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_lpToken(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("lpToken", "lpToken(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingReward(_pid: BigInt, _user: Address): BigInt {
    let result = super.call(
      "pendingReward",
      "pendingReward(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_pendingReward(_pid: BigInt, _user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingReward",
      "pendingReward(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolInfo(param0: BigInt): LevelMaster__poolInfoResult {
    let result = super.call(
      "poolInfo",
      "poolInfo(uint256):(uint128,uint64,uint64,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new LevelMaster__poolInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_poolInfo(
    param0: BigInt
  ): ethereum.CallResult<LevelMaster__poolInfoResult> {
    let result = super.tryCall(
      "poolInfo",
      "poolInfo(uint256):(uint128,uint64,uint64,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LevelMaster__poolInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerSecond(): BigInt {
    let result = super.call(
      "rewardPerSecond",
      "rewardPerSecond():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerSecond",
      "rewardPerSecond():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewarder(param0: BigInt): Address {
    let result = super.call("rewarder", "rewarder(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_rewarder(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("rewarder", "rewarder(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalAllocPoint(): BigInt {
    let result = super.call(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAllocPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updatePool(pid: BigInt): LevelMaster__updatePoolResultPoolStruct {
    let result = super.call(
      "updatePool",
      "updatePool(uint256):((uint128,uint64,uint64,bool))",
      [ethereum.Value.fromUnsignedBigInt(pid)]
    );

    return changetype<LevelMaster__updatePoolResultPoolStruct>(
      result[0].toTuple()
    );
  }

  try_updatePool(
    pid: BigInt
  ): ethereum.CallResult<LevelMaster__updatePoolResultPoolStruct> {
    let result = super.tryCall(
      "updatePool",
      "updatePool(uint256):((uint128,uint64,uint64,bool))",
      [ethereum.Value.fromUnsignedBigInt(pid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LevelMaster__updatePoolResultPoolStruct>(value[0].toTuple())
    );
  }

  userInfo(param0: BigInt, param1: Address): LevelMaster__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(uint256,address):(uint256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new LevelMaster__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userInfo(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<LevelMaster__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(uint256,address):(uint256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LevelMaster__userInfoResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  weth(): Address {
    let result = super.call("weth", "weth():(address)", []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth", "weth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _levelPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _levelStake(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _rewardToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get allocPoint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lpToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _staking(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _rewarder(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get assetToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get assetAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minLpAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }
}

export class AddLiquidityETHCall extends ethereum.Call {
  get inputs(): AddLiquidityETHCall__Inputs {
    return new AddLiquidityETHCall__Inputs(this);
  }

  get outputs(): AddLiquidityETHCall__Outputs {
    return new AddLiquidityETHCall__Outputs(this);
  }
}

export class AddLiquidityETHCall__Inputs {
  _call: AddLiquidityETHCall;

  constructor(call: AddLiquidityETHCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minLpAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddLiquidityETHCall__Outputs {
  _call: AddLiquidityETHCall;

  constructor(call: AddLiquidityETHCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class HarvestAllCall extends ethereum.Call {
  get inputs(): HarvestAllCall__Inputs {
    return new HarvestAllCall__Inputs(this);
  }

  get outputs(): HarvestAllCall__Outputs {
    return new HarvestAllCall__Outputs(this);
  }
}

export class HarvestAllCall__Inputs {
  _call: HarvestAllCall;

  constructor(call: HarvestAllCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class HarvestAllCall__Outputs {
  _call: HarvestAllCall;

  constructor(call: HarvestAllCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall extends ethereum.Call {
  get inputs(): MassUpdatePoolsCall__Inputs {
    return new MassUpdatePoolsCall__Inputs(this);
  }

  get outputs(): MassUpdatePoolsCall__Outputs {
    return new MassUpdatePoolsCall__Outputs(this);
  }
}

export class MassUpdatePoolsCall__Inputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }

  get pids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class MassUpdatePoolsCall__Outputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lpAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get toToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get minOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }
}

export class RemoveLiquidityETHCall extends ethereum.Call {
  get inputs(): RemoveLiquidityETHCall__Inputs {
    return new RemoveLiquidityETHCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityETHCall__Outputs {
    return new RemoveLiquidityETHCall__Outputs(this);
  }
}

export class RemoveLiquidityETHCall__Inputs {
  _call: RemoveLiquidityETHCall;

  constructor(call: RemoveLiquidityETHCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lpAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class RemoveLiquidityETHCall__Outputs {
  _call: RemoveLiquidityETHCall;

  constructor(call: RemoveLiquidityETHCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCall extends ethereum.Call {
  get inputs(): SetCall__Inputs {
    return new SetCall__Inputs(this);
  }

  get outputs(): SetCall__Outputs {
    return new SetCall__Outputs(this);
  }
}

export class SetCall__Inputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _staking(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _rewarder(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get overwrite(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class SetCall__Outputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }
}

export class SetRewardPerSecondCall extends ethereum.Call {
  get inputs(): SetRewardPerSecondCall__Inputs {
    return new SetRewardPerSecondCall__Inputs(this);
  }

  get outputs(): SetRewardPerSecondCall__Outputs {
    return new SetRewardPerSecondCall__Outputs(this);
  }
}

export class SetRewardPerSecondCall__Inputs {
  _call: SetRewardPerSecondCall;

  constructor(call: SetRewardPerSecondCall) {
    this._call = call;
  }

  get _rewardPerSecond(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardPerSecondCall__Outputs {
  _call: SetRewardPerSecondCall;

  constructor(call: SetRewardPerSecondCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get pool(): UpdatePoolCallPoolStruct {
    return changetype<UpdatePoolCallPoolStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class UpdatePoolCallPoolStruct extends ethereum.Tuple {
  get accRewardPerShare(): BigInt {
    return this[0].toBigInt();
  }

  get lastRewardTime(): BigInt {
    return this[1].toBigInt();
  }

  get allocPoint(): BigInt {
    return this[2].toBigInt();
  }

  get staking(): boolean {
    return this[3].toBoolean();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawAndHarvestCall extends ethereum.Call {
  get inputs(): WithdrawAndHarvestCall__Inputs {
    return new WithdrawAndHarvestCall__Inputs(this);
  }

  get outputs(): WithdrawAndHarvestCall__Outputs {
    return new WithdrawAndHarvestCall__Outputs(this);
  }
}

export class WithdrawAndHarvestCall__Inputs {
  _call: WithdrawAndHarvestCall;

  constructor(call: WithdrawAndHarvestCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawAndHarvestCall__Outputs {
  _call: WithdrawAndHarvestCall;

  constructor(call: WithdrawAndHarvestCall) {
    this._call = call;
  }
}
