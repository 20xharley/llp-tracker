// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AssetRebalanced extends ethereum.Event {
  get params(): AssetRebalanced__Params {
    return new AssetRebalanced__Params(this);
  }
}

export class AssetRebalanced__Params {
  _event: AssetRebalanced;

  constructor(event: AssetRebalanced) {
    this._event = event;
  }
}

export class ClosePosition extends ethereum.Event {
  get params(): ClosePosition__Params {
    return new ClosePosition__Params(this);
  }
}

export class ClosePosition__Params {
  _event: ClosePosition;

  constructor(event: ClosePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get size(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get entryInterestRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get reserveAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class DaoFeeSet extends ethereum.Event {
  get params(): DaoFeeSet__Params {
    return new DaoFeeSet__Params(this);
  }
}

export class DaoFeeSet__Params {
  _event: DaoFeeSet;

  constructor(event: DaoFeeSet) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DaoFeeWithdrawn extends ethereum.Event {
  get params(): DaoFeeWithdrawn__Params {
    return new DaoFeeWithdrawn__Params(this);
  }
}

export class DaoFeeWithdrawn__Params {
  _event: DaoFeeWithdrawn;

  constructor(event: DaoFeeWithdrawn) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DecreasePosition extends ethereum.Event {
  get params(): DecreasePosition__Params {
    return new DecreasePosition__Params(this);
  }
}

export class DecreasePosition__Params {
  _event: DecreasePosition;

  constructor(event: DecreasePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get indexToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get collateralChanged(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sizeChanged(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get side(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get indexPrice(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get pnl(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get feeValue(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class FeeDistributorSet extends ethereum.Event {
  get params(): FeeDistributorSet__Params {
    return new FeeDistributorSet__Params(this);
  }
}

export class FeeDistributorSet__Params {
  _event: FeeDistributorSet;

  constructor(event: FeeDistributorSet) {
    this._event = event;
  }

  get feeDistributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class IncreasePosition extends ethereum.Event {
  get params(): IncreasePosition__Params {
    return new IncreasePosition__Params(this);
  }
}

export class IncreasePosition__Params {
  _event: IncreasePosition;

  constructor(event: IncreasePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get indexToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get collateralValue(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sizeChanged(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get side(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get indexPrice(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get feeValue(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class InterestAccrued extends ethereum.Event {
  get params(): InterestAccrued__Params {
    return new InterestAccrued__Params(this);
  }
}

export class InterestAccrued__Params {
  _event: InterestAccrued;

  constructor(event: InterestAccrued) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrowIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InterestRateModelSet extends ethereum.Event {
  get params(): InterestRateModelSet__Params {
    return new InterestRateModelSet__Params(this);
  }
}

export class InterestRateModelSet__Params {
  _event: InterestRateModelSet;

  constructor(event: InterestRateModelSet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get interestRateModel(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class InterestRateSet extends ethereum.Event {
  get params(): InterestRateSet__Params {
    return new InterestRateSet__Params(this);
  }
}

export class InterestRateSet__Params {
  _event: InterestRateSet;

  constructor(event: InterestRateSet) {
    this._event = event;
  }

  get interestRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stableCoinInterestRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get interval(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquidatePosition extends ethereum.Event {
  get params(): LiquidatePosition__Params {
    return new LiquidatePosition__Params(this);
  }
}

export class LiquidatePosition__Params {
  _event: LiquidatePosition;

  constructor(event: LiquidatePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get indexToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get side(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get size(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get collateralValue(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get reserveAmount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get indexPrice(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get pnl(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get feeValue(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get tranche(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lpAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LiquidityCalculatorSet extends ethereum.Event {
  get params(): LiquidityCalculatorSet__Params {
    return new LiquidityCalculatorSet__Params(this);
  }
}

export class LiquidityCalculatorSet__Params {
  _event: LiquidityCalculatorSet;

  constructor(event: LiquidityCalculatorSet) {
    this._event = event;
  }

  get feeModel(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get tranche(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get lpAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class MaintenanceMarginChanged extends ethereum.Event {
  get params(): MaintenanceMarginChanged__Params {
    return new MaintenanceMarginChanged__Params(this);
  }
}

export class MaintenanceMarginChanged__Params {
  _event: MaintenanceMarginChanged;

  constructor(event: MaintenanceMarginChanged) {
    this._event = event;
  }

  get ratio(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MaxGlobalPositionSizeSet extends ethereum.Event {
  get params(): MaxGlobalPositionSizeSet__Params {
    return new MaxGlobalPositionSizeSet__Params(this);
  }
}

export class MaxGlobalPositionSizeSet__Params {
  _event: MaxGlobalPositionSizeSet;

  constructor(event: MaxGlobalPositionSizeSet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get maxLongRatios(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get maxShortSize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MaxLeverageChanged extends ethereum.Event {
  get params(): MaxLeverageChanged__Params {
    return new MaxLeverageChanged__Params(this);
  }
}

export class MaxLeverageChanged__Params {
  _event: MaxLeverageChanged;

  constructor(event: MaxLeverageChanged) {
    this._event = event;
  }

  get maxLeverage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MaxLiquiditySet extends ethereum.Event {
  get params(): MaxLiquiditySet__Params {
    return new MaxLiquiditySet__Params(this);
  }
}

export class MaxLiquiditySet__Params {
  _event: MaxLiquiditySet;

  constructor(event: MaxLiquiditySet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OracleChanged extends ethereum.Event {
  get params(): OracleChanged__Params {
    return new OracleChanged__Params(this);
  }
}

export class OracleChanged__Params {
  _event: OracleChanged;

  constructor(event: OracleChanged) {
    this._event = event;
  }

  get oldOracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PnLDistributed extends ethereum.Event {
  get params(): PnLDistributed__Params {
    return new PnLDistributed__Params(this);
  }
}

export class PnLDistributed__Params {
  _event: PnLDistributed;

  constructor(event: PnLDistributed) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tranche(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pnl(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PoolControllerChanged extends ethereum.Event {
  get params(): PoolControllerChanged__Params {
    return new PoolControllerChanged__Params(this);
  }
}

export class PoolControllerChanged__Params {
  _event: PoolControllerChanged;

  constructor(event: PoolControllerChanged) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolHookChanged extends ethereum.Event {
  get params(): PoolHookChanged__Params {
    return new PoolHookChanged__Params(this);
  }
}

export class PoolHookChanged__Params {
  _event: PoolHookChanged;

  constructor(event: PoolHookChanged) {
    this._event = event;
  }

  get hook(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PositionFeeSet extends ethereum.Event {
  get params(): PositionFeeSet__Params {
    return new PositionFeeSet__Params(this);
  }
}

export class PositionFeeSet__Params {
  _event: PositionFeeSet;

  constructor(event: PositionFeeSet) {
    this._event = event;
  }

  get positionFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liquidationFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetOrderManager extends ethereum.Event {
  get params(): SetOrderManager__Params {
    return new SetOrderManager__Params(this);
  }
}

export class SetOrderManager__Params {
  _event: SetOrderManager;

  constructor(event: SetOrderManager) {
    this._event = event;
  }

  get orderManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get priceIn(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get priceOut(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class TokenDelisted extends ethereum.Event {
  get params(): TokenDelisted__Params {
    return new TokenDelisted__Params(this);
  }
}

export class TokenDelisted__Params {
  _event: TokenDelisted;

  constructor(event: TokenDelisted) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TokenRiskFactorUpdated extends ethereum.Event {
  get params(): TokenRiskFactorUpdated__Params {
    return new TokenRiskFactorUpdated__Params(this);
  }
}

export class TokenRiskFactorUpdated__Params {
  _event: TokenRiskFactorUpdated;

  constructor(event: TokenRiskFactorUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TokenWeightSet extends ethereum.Event {
  get params(): TokenWeightSet__Params {
    return new TokenWeightSet__Params(this);
  }
}

export class TokenWeightSet__Params {
  _event: TokenWeightSet;

  constructor(event: TokenWeightSet) {
    this._event = event;
  }

  get param0(): Array<TokenWeightSetParam0Struct> {
    return this._event.parameters[0].value.toTupleArray<
      TokenWeightSetParam0Struct
    >();
  }
}

export class TokenWeightSetParam0Struct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class TokenWhitelisted extends ethereum.Event {
  get params(): TokenWhitelisted__Params {
    return new TokenWhitelisted__Params(this);
  }
}

export class TokenWhitelisted__Params {
  _event: TokenWhitelisted;

  constructor(event: TokenWhitelisted) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TrancheAdded extends ethereum.Event {
  get params(): TrancheAdded__Params {
    return new TrancheAdded__Params(this);
  }
}

export class TrancheAdded__Params {
  _event: TrancheAdded;

  constructor(event: TrancheAdded) {
    this._event = event;
  }

  get lpToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatePosition extends ethereum.Event {
  get params(): UpdatePosition__Params {
    return new UpdatePosition__Params(this);
  }
}

export class UpdatePosition__Params {
  _event: UpdatePosition;

  constructor(event: UpdatePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get size(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get entryInterestRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get reserveAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get indexPrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class VirtualPoolValueRefreshed extends ethereum.Event {
  get params(): VirtualPoolValueRefreshed__Params {
    return new VirtualPoolValueRefreshed__Params(this);
  }
}

export class VirtualPoolValueRefreshed__Params {
  _event: VirtualPoolValueRefreshed;

  constructor(event: VirtualPoolValueRefreshed) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Pool__getAllAssetsResult {
  value0: Array<Address>;
  value1: Array<boolean>;

  constructor(value0: Array<Address>, value1: Array<boolean>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromBooleanArray(this.value1));
    return map;
  }

  getAssets(): Array<Address> {
    return this.value0;
  }

  getIsStable(): Array<boolean> {
    return this.value1;
  }
}

export class Pool__getPoolAssetResultValue0Struct extends ethereum.Tuple {
  get poolAmount(): BigInt {
    return this[0].toBigInt();
  }

  get reservedAmount(): BigInt {
    return this[1].toBigInt();
  }

  get guaranteedValue(): BigInt {
    return this[2].toBigInt();
  }

  get totalShortSize(): BigInt {
    return this[3].toBigInt();
  }

  get averageShortPrice(): BigInt {
    return this[4].toBigInt();
  }
}

export class Pool__positionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getSize(): BigInt {
    return this.value0;
  }

  getCollateralValue(): BigInt {
    return this.value1;
  }

  getReserveAmount(): BigInt {
    return this.value2;
  }

  getEntryPrice(): BigInt {
    return this.value3;
  }

  getBorrowIndex(): BigInt {
    return this.value4;
  }
}

export class Pool__trancheAssetsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getPoolAmount(): BigInt {
    return this.value0;
  }

  getReservedAmount(): BigInt {
    return this.value1;
  }

  getGuaranteedValue(): BigInt {
    return this.value2;
  }

  getTotalShortSize(): BigInt {
    return this.value3;
  }

  getAverageShortPrice(): BigInt {
    return this.value4;
  }
}

export class Pool extends ethereum.SmartContract {
  static bind(address: Address): Pool {
    return new Pool("Pool", address);
  }

  accrualInterval(): BigInt {
    let result = super.call(
      "accrualInterval",
      "accrualInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accrualInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accrualInterval",
      "accrualInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accrueInterest(_token: Address): BigInt {
    let result = super.call(
      "accrueInterest",
      "accrueInterest(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_accrueInterest(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accrueInterest",
      "accrueInterest(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allAssets(param0: BigInt): Address {
    let result = super.call("allAssets", "allAssets(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allAssets(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allAssets", "allAssets(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allTranches(param0: BigInt): Address {
    let result = super.call("allTranches", "allTranches(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allTranches(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allTranches",
      "allTranches(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  borrowIndices(token: Address): BigInt {
    let result = super.call(
      "borrowIndices",
      "borrowIndices(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_borrowIndices(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowIndices",
      "borrowIndices(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canSwap(_tokenIn: Address, _tokenOut: Address): boolean {
    let result = super.call("canSwap", "canSwap(address,address):(bool)", [
      ethereum.Value.fromAddress(_tokenIn),
      ethereum.Value.fromAddress(_tokenOut)
    ]);

    return result[0].toBoolean();
  }

  try_canSwap(
    _tokenIn: Address,
    _tokenOut: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("canSwap", "canSwap(address,address):(bool)", [
      ethereum.Value.fromAddress(_tokenIn),
      ethereum.Value.fromAddress(_tokenOut)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  daoFee(): BigInt {
    let result = super.call("daoFee", "daoFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_daoFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("daoFee", "daoFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeDistributor(): Address {
    let result = super.call("feeDistributor", "feeDistributor():(address)", []);

    return result[0].toAddress();
  }

  try_feeDistributor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "feeDistributor",
      "feeDistributor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeReserves(token: Address): BigInt {
    let result = super.call("feeReserves", "feeReserves(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_feeReserves(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeReserves",
      "feeReserves(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllAssets(): Pool__getAllAssetsResult {
    let result = super.call(
      "getAllAssets",
      "getAllAssets():(address[],bool[])",
      []
    );

    return new Pool__getAllAssetsResult(
      result[0].toAddressArray(),
      result[1].toBooleanArray()
    );
  }

  try_getAllAssets(): ethereum.CallResult<Pool__getAllAssetsResult> {
    let result = super.tryCall(
      "getAllAssets",
      "getAllAssets():(address[],bool[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__getAllAssetsResult(
        value[0].toAddressArray(),
        value[1].toBooleanArray()
      )
    );
  }

  getAllTranches(): Array<Address> {
    let result = super.call(
      "getAllTranches",
      "getAllTranches():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllTranches(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllTranches",
      "getAllTranches():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getPoolAsset(_token: Address): Pool__getPoolAssetResultValue0Struct {
    let result = super.call(
      "getPoolAsset",
      "getPoolAsset(address):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(_token)]
    );

    return changetype<Pool__getPoolAssetResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPoolAsset(
    _token: Address
  ): ethereum.CallResult<Pool__getPoolAssetResultValue0Struct> {
    let result = super.tryCall(
      "getPoolAsset",
      "getPoolAsset(address):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Pool__getPoolAssetResultValue0Struct>(value[0].toTuple())
    );
  }

  globalShortSize(): BigInt {
    let result = super.call(
      "globalShortSize",
      "globalShortSize():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_globalShortSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "globalShortSize",
      "globalShortSize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestRate(_token: Address): BigInt {
    let result = super.call("interestRate", "interestRate(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBigInt();
  }

  try_interestRate(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestRate",
      "interestRate(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestRateModel(token: Address): Address {
    let result = super.call(
      "interestRateModel",
      "interestRateModel(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toAddress();
  }

  try_interestRateModel(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "interestRateModel",
      "interestRateModel(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAsset(param0: Address): boolean {
    let result = super.call("isAsset", "isAsset(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isAsset(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAsset", "isAsset(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isListed(token: Address): boolean {
    let result = super.call("isListed", "isListed(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_isListed(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isListed", "isListed(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isStableCoin(token: Address): boolean {
    let result = super.call("isStableCoin", "isStableCoin(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_isStableCoin(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isStableCoin", "isStableCoin(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTranche(lpToken: Address): boolean {
    let result = super.call("isTranche", "isTranche(address):(bool)", [
      ethereum.Value.fromAddress(lpToken)
    ]);

    return result[0].toBoolean();
  }

  try_isTranche(lpToken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isTranche", "isTranche(address):(bool)", [
      ethereum.Value.fromAddress(lpToken)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidLeverageTokenPair(
    _indexToken: Address,
    _collateralToken: Address,
    _side: i32,
    _isIncrease: boolean
  ): boolean {
    let result = super.call(
      "isValidLeverageTokenPair",
      "isValidLeverageTokenPair(address,address,uint8,bool):(bool)",
      [
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_side)),
        ethereum.Value.fromBoolean(_isIncrease)
      ]
    );

    return result[0].toBoolean();
  }

  try_isValidLeverageTokenPair(
    _indexToken: Address,
    _collateralToken: Address,
    _side: i32,
    _isIncrease: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidLeverageTokenPair",
      "isValidLeverageTokenPair(address,address,uint8,bool):(bool)",
      [
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_side)),
        ethereum.Value.fromBoolean(_isIncrease)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastAccrualTimestamps(token: Address): BigInt {
    let result = super.call(
      "lastAccrualTimestamps",
      "lastAccrualTimestamps(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_lastAccrualTimestamps(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastAccrualTimestamps",
      "lastAccrualTimestamps(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationFee(): BigInt {
    let result = super.call("liquidationFee", "liquidationFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_liquidationFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationFee",
      "liquidationFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityCalculator(): Address {
    let result = super.call(
      "liquidityCalculator",
      "liquidityCalculator():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_liquidityCalculator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityCalculator",
      "liquidityCalculator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maintenanceMargin(): BigInt {
    let result = super.call(
      "maintenanceMargin",
      "maintenanceMargin():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maintenanceMargin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maintenanceMargin",
      "maintenanceMargin():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxGlobalLongSizeRatios(indexToken: Address): BigInt {
    let result = super.call(
      "maxGlobalLongSizeRatios",
      "maxGlobalLongSizeRatios(address):(uint256)",
      [ethereum.Value.fromAddress(indexToken)]
    );

    return result[0].toBigInt();
  }

  try_maxGlobalLongSizeRatios(
    indexToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxGlobalLongSizeRatios",
      "maxGlobalLongSizeRatios(address):(uint256)",
      [ethereum.Value.fromAddress(indexToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxGlobalShortSizes(indexToken: Address): BigInt {
    let result = super.call(
      "maxGlobalShortSizes",
      "maxGlobalShortSizes(address):(uint256)",
      [ethereum.Value.fromAddress(indexToken)]
    );

    return result[0].toBigInt();
  }

  try_maxGlobalShortSizes(indexToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxGlobalShortSizes",
      "maxGlobalShortSizes(address):(uint256)",
      [ethereum.Value.fromAddress(indexToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxLeverage(): BigInt {
    let result = super.call("maxLeverage", "maxLeverage():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxLeverage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxLeverage", "maxLeverage():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxLiquidity(token: Address): BigInt {
    let result = super.call("maxLiquidity", "maxLiquidity(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_maxLiquidity(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxLiquidity",
      "maxLiquidity(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  orderManager(): Address {
    let result = super.call("orderManager", "orderManager():(address)", []);

    return result[0].toAddress();
  }

  try_orderManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("orderManager", "orderManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolBalances(token: Address): BigInt {
    let result = super.call("poolBalances", "poolBalances(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_poolBalances(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolBalances",
      "poolBalances(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolHook(): Address {
    let result = super.call("poolHook", "poolHook():(address)", []);

    return result[0].toAddress();
  }

  try_poolHook(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolHook", "poolHook():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  positionFee(): BigInt {
    let result = super.call("positionFee", "positionFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_positionFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("positionFee", "positionFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positionRevisions(positionKey: Bytes): BigInt {
    let result = super.call(
      "positionRevisions",
      "positionRevisions(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(positionKey)]
    );

    return result[0].toBigInt();
  }

  try_positionRevisions(positionKey: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "positionRevisions",
      "positionRevisions(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(positionKey)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positions(positionKey: Bytes): Pool__positionsResult {
    let result = super.call(
      "positions",
      "positions(bytes32):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(positionKey)]
    );

    return new Pool__positionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_positions(
    positionKey: Bytes
  ): ethereum.CallResult<Pool__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(bytes32):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(positionKey)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__positionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  riskFactor(token: Address, tranche: Address): BigInt {
    let result = super.call(
      "riskFactor",
      "riskFactor(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(tranche)]
    );

    return result[0].toBigInt();
  }

  try_riskFactor(
    token: Address,
    tranche: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "riskFactor",
      "riskFactor(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(tranche)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  targetWeights(token: Address): BigInt {
    let result = super.call(
      "targetWeights",
      "targetWeights(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_targetWeights(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "targetWeights",
      "targetWeights(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRiskFactor(token: Address): BigInt {
    let result = super.call(
      "totalRiskFactor",
      "totalRiskFactor(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_totalRiskFactor(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRiskFactor",
      "totalRiskFactor(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWeight(): BigInt {
    let result = super.call("totalWeight", "totalWeight():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalWeight", "totalWeight():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trancheAssets(tranche: Address, token: Address): Pool__trancheAssetsResult {
    let result = super.call(
      "trancheAssets",
      "trancheAssets(address,address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(tranche), ethereum.Value.fromAddress(token)]
    );

    return new Pool__trancheAssetsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_trancheAssets(
    tranche: Address,
    token: Address
  ): ethereum.CallResult<Pool__trancheAssetsResult> {
    let result = super.tryCall(
      "trancheAssets",
      "trancheAssets(address,address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(tranche), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__trancheAssetsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  tranchePositionReserves(tranche: Address, positionKey: Bytes): BigInt {
    let result = super.call(
      "tranchePositionReserves",
      "tranchePositionReserves(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(tranche),
        ethereum.Value.fromFixedBytes(positionKey)
      ]
    );

    return result[0].toBigInt();
  }

  try_tranchePositionReserves(
    tranche: Address,
    positionKey: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tranchePositionReserves",
      "tranchePositionReserves(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(tranche),
        ethereum.Value.fromFixedBytes(positionKey)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  virtualPoolValue(): BigInt {
    let result = super.call(
      "virtualPoolValue",
      "virtualPoolValue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_virtualPoolValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "virtualPoolValue",
      "virtualPoolValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AccrueInterestCall extends ethereum.Call {
  get inputs(): AccrueInterestCall__Inputs {
    return new AccrueInterestCall__Inputs(this);
  }

  get outputs(): AccrueInterestCall__Outputs {
    return new AccrueInterestCall__Outputs(this);
  }
}

export class AccrueInterestCall__Inputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AccrueInterestCall__Outputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get _tranche(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minLpAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }
}

export class AddTokenCall extends ethereum.Call {
  get inputs(): AddTokenCall__Inputs {
    return new AddTokenCall__Inputs(this);
  }

  get outputs(): AddTokenCall__Outputs {
    return new AddTokenCall__Outputs(this);
  }
}

export class AddTokenCall__Inputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isStableCoin(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AddTokenCall__Outputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }
}

export class AddTrancheCall extends ethereum.Call {
  get inputs(): AddTrancheCall__Inputs {
    return new AddTrancheCall__Inputs(this);
  }

  get outputs(): AddTrancheCall__Outputs {
    return new AddTrancheCall__Outputs(this);
  }
}

export class AddTrancheCall__Inputs {
  _call: AddTrancheCall;

  constructor(call: AddTrancheCall) {
    this._call = call;
  }

  get _tranche(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddTrancheCall__Outputs {
  _call: AddTrancheCall;

  constructor(call: AddTrancheCall) {
    this._call = call;
  }
}

export class DecreasePositionCall extends ethereum.Call {
  get inputs(): DecreasePositionCall__Inputs {
    return new DecreasePositionCall__Inputs(this);
  }

  get outputs(): DecreasePositionCall__Outputs {
    return new DecreasePositionCall__Outputs(this);
  }
}

export class DecreasePositionCall__Inputs {
  _call: DecreasePositionCall;

  constructor(call: DecreasePositionCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _indexToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _collateralToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _collateralChanged(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _sizeChanged(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _side(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _receiver(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class DecreasePositionCall__Outputs {
  _call: DecreasePositionCall;

  constructor(call: DecreasePositionCall) {
    this._call = call;
  }
}

export class DelistTokenCall extends ethereum.Call {
  get inputs(): DelistTokenCall__Inputs {
    return new DelistTokenCall__Inputs(this);
  }

  get outputs(): DelistTokenCall__Outputs {
    return new DelistTokenCall__Outputs(this);
  }
}

export class DelistTokenCall__Inputs {
  _call: DelistTokenCall;

  constructor(call: DelistTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelistTokenCall__Outputs {
  _call: DelistTokenCall;

  constructor(call: DelistTokenCall) {
    this._call = call;
  }
}

export class IncreasePositionCall extends ethereum.Call {
  get inputs(): IncreasePositionCall__Inputs {
    return new IncreasePositionCall__Inputs(this);
  }

  get outputs(): IncreasePositionCall__Outputs {
    return new IncreasePositionCall__Outputs(this);
  }
}

export class IncreasePositionCall__Inputs {
  _call: IncreasePositionCall;

  constructor(call: IncreasePositionCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _indexToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _collateralToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _sizeChanged(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _side(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class IncreasePositionCall__Outputs {
  _call: IncreasePositionCall;

  constructor(call: IncreasePositionCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _maxLeverage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maintainanceMargin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _interestAccrualInterval(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidatePositionCall extends ethereum.Call {
  get inputs(): LiquidatePositionCall__Inputs {
    return new LiquidatePositionCall__Inputs(this);
  }

  get outputs(): LiquidatePositionCall__Outputs {
    return new LiquidatePositionCall__Outputs(this);
  }
}

export class LiquidatePositionCall__Inputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _indexToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _collateralToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _side(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class LiquidatePositionCall__Outputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }
}

export class RebalanceAssetCall extends ethereum.Call {
  get inputs(): RebalanceAssetCall__Inputs {
    return new RebalanceAssetCall__Inputs(this);
  }

  get outputs(): RebalanceAssetCall__Outputs {
    return new RebalanceAssetCall__Outputs(this);
  }
}

export class RebalanceAssetCall__Inputs {
  _call: RebalanceAssetCall;

  constructor(call: RebalanceAssetCall) {
    this._call = call;
  }

  get _fromTranche(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _fromToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _fromAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _toTranche(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _toToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class RebalanceAssetCall__Outputs {
  _call: RebalanceAssetCall;

  constructor(call: RebalanceAssetCall) {
    this._call = call;
  }
}

export class RefreshVirtualPoolValueCall extends ethereum.Call {
  get inputs(): RefreshVirtualPoolValueCall__Inputs {
    return new RefreshVirtualPoolValueCall__Inputs(this);
  }

  get outputs(): RefreshVirtualPoolValueCall__Outputs {
    return new RefreshVirtualPoolValueCall__Outputs(this);
  }
}

export class RefreshVirtualPoolValueCall__Inputs {
  _call: RefreshVirtualPoolValueCall;

  constructor(call: RefreshVirtualPoolValueCall) {
    this._call = call;
  }
}

export class RefreshVirtualPoolValueCall__Outputs {
  _call: RefreshVirtualPoolValueCall;

  constructor(call: RefreshVirtualPoolValueCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get _tranche(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenOut(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _lpAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetDaoFeeCall extends ethereum.Call {
  get inputs(): SetDaoFeeCall__Inputs {
    return new SetDaoFeeCall__Inputs(this);
  }

  get outputs(): SetDaoFeeCall__Outputs {
    return new SetDaoFeeCall__Outputs(this);
  }
}

export class SetDaoFeeCall__Inputs {
  _call: SetDaoFeeCall;

  constructor(call: SetDaoFeeCall) {
    this._call = call;
  }

  get _daoFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDaoFeeCall__Outputs {
  _call: SetDaoFeeCall;

  constructor(call: SetDaoFeeCall) {
    this._call = call;
  }
}

export class SetInterestRateModelCall extends ethereum.Call {
  get inputs(): SetInterestRateModelCall__Inputs {
    return new SetInterestRateModelCall__Inputs(this);
  }

  get outputs(): SetInterestRateModelCall__Outputs {
    return new SetInterestRateModelCall__Outputs(this);
  }
}

export class SetInterestRateModelCall__Inputs {
  _call: SetInterestRateModelCall;

  constructor(call: SetInterestRateModelCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _interestRateModel(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetInterestRateModelCall__Outputs {
  _call: SetInterestRateModelCall;

  constructor(call: SetInterestRateModelCall) {
    this._call = call;
  }
}

export class SetLiquidityCalculatorCall extends ethereum.Call {
  get inputs(): SetLiquidityCalculatorCall__Inputs {
    return new SetLiquidityCalculatorCall__Inputs(this);
  }

  get outputs(): SetLiquidityCalculatorCall__Outputs {
    return new SetLiquidityCalculatorCall__Outputs(this);
  }
}

export class SetLiquidityCalculatorCall__Inputs {
  _call: SetLiquidityCalculatorCall;

  constructor(call: SetLiquidityCalculatorCall) {
    this._call = call;
  }

  get _liquidityManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLiquidityCalculatorCall__Outputs {
  _call: SetLiquidityCalculatorCall;

  constructor(call: SetLiquidityCalculatorCall) {
    this._call = call;
  }
}

export class SetMaxGlobalPositionSizeCall extends ethereum.Call {
  get inputs(): SetMaxGlobalPositionSizeCall__Inputs {
    return new SetMaxGlobalPositionSizeCall__Inputs(this);
  }

  get outputs(): SetMaxGlobalPositionSizeCall__Outputs {
    return new SetMaxGlobalPositionSizeCall__Outputs(this);
  }
}

export class SetMaxGlobalPositionSizeCall__Inputs {
  _call: SetMaxGlobalPositionSizeCall;

  constructor(call: SetMaxGlobalPositionSizeCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _maxGlobalLongRatio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _maxGlobalShortSize(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetMaxGlobalPositionSizeCall__Outputs {
  _call: SetMaxGlobalPositionSizeCall;

  constructor(call: SetMaxGlobalPositionSizeCall) {
    this._call = call;
  }
}

export class SetMaxLeverageCall extends ethereum.Call {
  get inputs(): SetMaxLeverageCall__Inputs {
    return new SetMaxLeverageCall__Inputs(this);
  }

  get outputs(): SetMaxLeverageCall__Outputs {
    return new SetMaxLeverageCall__Outputs(this);
  }
}

export class SetMaxLeverageCall__Inputs {
  _call: SetMaxLeverageCall;

  constructor(call: SetMaxLeverageCall) {
    this._call = call;
  }

  get _maxLeverage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxLeverageCall__Outputs {
  _call: SetMaxLeverageCall;

  constructor(call: SetMaxLeverageCall) {
    this._call = call;
  }
}

export class SetMaxLiquidityCall extends ethereum.Call {
  get inputs(): SetMaxLiquidityCall__Inputs {
    return new SetMaxLiquidityCall__Inputs(this);
  }

  get outputs(): SetMaxLiquidityCall__Outputs {
    return new SetMaxLiquidityCall__Outputs(this);
  }
}

export class SetMaxLiquidityCall__Inputs {
  _call: SetMaxLiquidityCall;

  constructor(call: SetMaxLiquidityCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMaxLiquidityCall__Outputs {
  _call: SetMaxLiquidityCall;

  constructor(call: SetMaxLiquidityCall) {
    this._call = call;
  }
}

export class SetOracleCall extends ethereum.Call {
  get inputs(): SetOracleCall__Inputs {
    return new SetOracleCall__Inputs(this);
  }

  get outputs(): SetOracleCall__Outputs {
    return new SetOracleCall__Outputs(this);
  }
}

export class SetOracleCall__Inputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleCall__Outputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }
}

export class SetOrderManagerCall extends ethereum.Call {
  get inputs(): SetOrderManagerCall__Inputs {
    return new SetOrderManagerCall__Inputs(this);
  }

  get outputs(): SetOrderManagerCall__Outputs {
    return new SetOrderManagerCall__Outputs(this);
  }
}

export class SetOrderManagerCall__Inputs {
  _call: SetOrderManagerCall;

  constructor(call: SetOrderManagerCall) {
    this._call = call;
  }

  get _orderManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOrderManagerCall__Outputs {
  _call: SetOrderManagerCall;

  constructor(call: SetOrderManagerCall) {
    this._call = call;
  }
}

export class SetPoolHookCall extends ethereum.Call {
  get inputs(): SetPoolHookCall__Inputs {
    return new SetPoolHookCall__Inputs(this);
  }

  get outputs(): SetPoolHookCall__Outputs {
    return new SetPoolHookCall__Outputs(this);
  }
}

export class SetPoolHookCall__Inputs {
  _call: SetPoolHookCall;

  constructor(call: SetPoolHookCall) {
    this._call = call;
  }

  get _hook(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPoolHookCall__Outputs {
  _call: SetPoolHookCall;

  constructor(call: SetPoolHookCall) {
    this._call = call;
  }
}

export class SetPositionFeeCall extends ethereum.Call {
  get inputs(): SetPositionFeeCall__Inputs {
    return new SetPositionFeeCall__Inputs(this);
  }

  get outputs(): SetPositionFeeCall__Outputs {
    return new SetPositionFeeCall__Outputs(this);
  }
}

export class SetPositionFeeCall__Inputs {
  _call: SetPositionFeeCall;

  constructor(call: SetPositionFeeCall) {
    this._call = call;
  }

  get _positionFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _liquidationFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPositionFeeCall__Outputs {
  _call: SetPositionFeeCall;

  constructor(call: SetPositionFeeCall) {
    this._call = call;
  }
}

export class SetPositionFeeDistributorCall extends ethereum.Call {
  get inputs(): SetPositionFeeDistributorCall__Inputs {
    return new SetPositionFeeDistributorCall__Inputs(this);
  }

  get outputs(): SetPositionFeeDistributorCall__Outputs {
    return new SetPositionFeeDistributorCall__Outputs(this);
  }
}

export class SetPositionFeeDistributorCall__Inputs {
  _call: SetPositionFeeDistributorCall;

  constructor(call: SetPositionFeeDistributorCall) {
    this._call = call;
  }

  get _feeDistributor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPositionFeeDistributorCall__Outputs {
  _call: SetPositionFeeDistributorCall;

  constructor(call: SetPositionFeeDistributorCall) {
    this._call = call;
  }
}

export class SetRiskFactorCall extends ethereum.Call {
  get inputs(): SetRiskFactorCall__Inputs {
    return new SetRiskFactorCall__Inputs(this);
  }

  get outputs(): SetRiskFactorCall__Outputs {
    return new SetRiskFactorCall__Outputs(this);
  }
}

export class SetRiskFactorCall__Inputs {
  _call: SetRiskFactorCall;

  constructor(call: SetRiskFactorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _config(): Array<SetRiskFactorCall_configStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      SetRiskFactorCall_configStruct
    >();
  }
}

export class SetRiskFactorCall__Outputs {
  _call: SetRiskFactorCall;

  constructor(call: SetRiskFactorCall) {
    this._call = call;
  }
}

export class SetRiskFactorCall_configStruct extends ethereum.Tuple {
  get tranche(): Address {
    return this[0].toAddress();
  }

  get riskFactor(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetTargetWeightCall extends ethereum.Call {
  get inputs(): SetTargetWeightCall__Inputs {
    return new SetTargetWeightCall__Inputs(this);
  }

  get outputs(): SetTargetWeightCall__Outputs {
    return new SetTargetWeightCall__Outputs(this);
  }
}

export class SetTargetWeightCall__Inputs {
  _call: SetTargetWeightCall;

  constructor(call: SetTargetWeightCall) {
    this._call = call;
  }

  get tokens(): Array<SetTargetWeightCallTokensStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SetTargetWeightCallTokensStruct
    >();
  }
}

export class SetTargetWeightCall__Outputs {
  _call: SetTargetWeightCall;

  constructor(call: SetTargetWeightCall) {
    this._call = call;
  }
}

export class SetTargetWeightCallTokensStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get _tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenOut(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _minOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get extradata(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawFeeCall extends ethereum.Call {
  get inputs(): WithdrawFeeCall__Inputs {
    return new WithdrawFeeCall__Inputs(this);
  }

  get outputs(): WithdrawFeeCall__Outputs {
    return new WithdrawFeeCall__Outputs(this);
  }
}

export class WithdrawFeeCall__Inputs {
  _call: WithdrawFeeCall;

  constructor(call: WithdrawFeeCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawFeeCall__Outputs {
  _call: WithdrawFeeCall;

  constructor(call: WithdrawFeeCall) {
    this._call = call;
  }
}
